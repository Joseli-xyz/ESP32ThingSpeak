#include "DHT.h"                // Librerias necesarias // Necessary libraries
#include "Adafruit_BMP085.h"    
#include "ThingSpeak.h"
#include "WiFi.h"

#define pin1 13                  
#define pin2 32

const char* ssid ="ssid";      // Nombre de la red de wifi local    // Your local wifi name here
const char* password= "password";  //La contraseña va aqui          // Password goes here

unsigned long channelID= channelID;   // ID del canal autogenerado con ThingSpeak     // ID from the auto-generated channel by ThingSpeak
const char* WriteAPIKey= "WriteAPIKey"; // API Key del canal autogenerado             // API Key auto-generated by ThingSpeak

WiFiClient Client;   //Nombre del wifi   //Your WiFi client name

DHT dht1(pin1, DHT11);  // Denominación de sensor     // Sensor´s name


Adafruit_BMP085 bmp;    //Denominación de módulo BMP  //BMP´s name

void setup() {
  Serial.begin(115200);                        //Conectar al puerto 115200 desde Arduino   //Connect to port 115200 through Arduino
  Serial.println("Test de sensores: ");

  WiFi.begin(ssid, password);             
  while (WiFi.status() != WL_CONNECTED)        //Se conectará al wifi, si falla generará (.) cada medio segundo   //It will connect to your local wifi, otherwise it will type (.) each half a second
  {
    delay(500);
    Serial.print(".");
  }

  Serial.println("Wifi Conectado");            // Confirmacíon de ThingSpeak conectado, y que enviará información al cliente a traves de la red WiFi  // Confirmation to know if ThingSpeak has been connected sucessfully, it will start sending data through your client
  ThingSpeak.begin(Client);


  dht1.begin();                                // Iniciará los sensores      //Sensors will start working

}

void loop() {

  delay(2000);                                 //Esperará dos segundos, luego enviará los datos por terminal y Thingspeak, se reiniciará cada 14 segundos  // At this point, sensor would need to wait 2 seconds, just to start both Arduino´s terminal and ThingSpeak reciving the data
  leerdht1();

  ThingSpeak.writeFields(channelID, WriteAPIKey);
  Serial.println("Datos Enviados a ThingSpeak");
  delay(14000);
}

void leerdht1() {

  float t1 = dht1.readTemperature();                              // Proceso de control de función para DHT, con sus variables asignadas    //Control process for DHT sensors, with it´s assignated entities
  float h1 = dht1.readHumidity();

  while (isnan(t1) || isnan(h1)) {
    Serial.println("Lectura fallida en el sensor DHT11, repitiendo la lectura...");
    delay(2000);
    t1 = dht1.readTemperature();
    h1 = dht1.readHumidity();
  }

  Serial.print("Temperatura DHT1: ");
  Serial.print(t1);
  Serial.println(" C ");

  Serial.print("Humedad DHT1: ");
  Serial.print(h1);
  Serial.println(" % ");

  Serial.println("----------------");

  ThingSpeak.setField(1, t1);
  ThingSpeak.setField(2, h1);
}

/*
void leerdht2() {

  float t2 = dht2.readTemperature();
  float h2 = dht2.readHumidity();

  while (isnan(t2) || isnan(h2)) {
    Serial.println("Lectura fallida en el sensor DHT12, repitiendo la lectura...");
    delay(2000);
    t2 = dht1.readTemperature();
    h2 = dht1.readHumidity();
  }

  Serial.print("Temperatura DHT2: ");
  Serial.print(t2);
  Serial.println(" C ");

  Serial.print("Humedad DHT2: ");
  Serial.print(h2);
  Serial.println(" % ");

  Serial.println("----------------");
}
*/

/*

void leerbmp() {

  float temp = bmp.readTemperature();
  float presion = bmp.readPressure();
  float altitud = bmp.readAltitude();
}

*/
